// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/main.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalisadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\0\2\14"+
    "\1\15\1\12\1\14\1\12\1\16\1\17\12\20\1\0"+
    "\1\14\1\21\1\22\1\23\2\0\13\24\1\25\1\24"+
    "\1\26\6\24\1\27\5\24\6\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\24\1\41"+
    "\1\42\1\24\1\43\1\44\2\24\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\3\24\1\14\1\53\1\14\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\1\1\1\4\1\3"+
    "\1\5\1\6\1\4\15\7\1\1\1\6\1\0\1\10"+
    "\1\0\1\11\1\3\1\2\1\0\1\5\1\0\1\6"+
    "\3\7\1\12\11\7\4\0\2\3\4\7\1\12\6\7"+
    "\2\0\1\3\1\2\2\7\1\0\3\7\1\0\1\12"+
    "\3\7\37\0\1\12\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\260\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05ac\0\204\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u0134\0\u0478\0\u086c"+
    "\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc"+
    "\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0108\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60"+
    "\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0"+
    "\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0"+
    "\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600"+
    "\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\10\1\2\1\13\1\14"+
    "\1\15\1\16\1\15\2\17\1\20\2\17\1\21\1\22"+
    "\1\23\1\24\1\25\2\17\1\26\2\17\1\27\1\17"+
    "\1\30\1\31\2\17\1\32\1\33\1\34\56\0\1\3"+
    "\73\0\1\35\31\0\10\36\1\37\43\36\40\0\1\40"+
    "\25\0\1\10\2\0\1\10\1\0\1\10\47\0\1\41"+
    "\54\0\1\12\5\0\1\12\43\0\1\10\2\0\1\42"+
    "\1\0\1\43\34\0\2\44\4\0\12\44\1\45\33\44"+
    "\7\0\1\46\11\0\3\15\44\0\1\12\5\0\1\47"+
    "\51\0\1\17\3\0\27\17\21\0\1\17\3\0\3\17"+
    "\1\50\23\17\21\0\1\17\3\0\21\17\1\51\5\17"+
    "\21\0\1\17\3\0\4\17\1\52\22\17\21\0\1\17"+
    "\3\0\20\17\1\53\6\17\21\0\1\17\3\0\16\17"+
    "\1\52\10\17\21\0\1\17\3\0\16\17\1\54\1\17"+
    "\1\55\6\17\21\0\1\17\3\0\11\17\1\53\5\17"+
    "\1\56\7\17\21\0\1\17\3\0\24\17\1\57\2\17"+
    "\21\0\1\17\3\0\10\17\1\60\16\17\21\0\1\17"+
    "\3\0\23\17\1\61\2\17\1\62\21\0\1\17\3\0"+
    "\20\17\1\63\6\17\21\0\1\17\3\0\13\17\1\64"+
    "\13\17\54\0\1\41\7\0\1\46\11\0\1\15\1\46"+
    "\1\15\40\0\1\36\106\0\1\65\23\0\1\66\37\0"+
    "\1\67\12\70\1\71\2\70\1\72\1\70\1\71\34\70"+
    "\2\43\1\3\2\43\1\4\46\43\20\0\1\45\42\0"+
    "\1\46\4\0\1\12\4\0\1\15\1\16\1\15\50\0"+
    "\1\17\3\0\1\17\1\73\25\17\21\0\1\17\3\0"+
    "\10\17\1\74\16\17\21\0\1\17\3\0\22\17\1\75"+
    "\4\17\21\0\1\17\3\0\2\17\1\20\2\17\1\21"+
    "\1\22\1\23\1\24\1\25\2\17\1\26\2\17\1\27"+
    "\1\17\1\30\1\31\2\17\1\32\1\33\21\0\1\17"+
    "\3\0\20\17\1\76\6\17\21\0\1\17\3\0\21\17"+
    "\1\53\5\17\21\0\1\17\3\0\23\17\1\77\3\17"+
    "\21\0\1\17\3\0\16\17\1\100\10\17\21\0\1\17"+
    "\3\0\23\17\1\101\3\17\21\0\1\17\3\0\21\17"+
    "\1\102\5\17\21\0\1\17\3\0\14\17\1\103\12\17"+
    "\21\0\1\17\3\0\14\17\1\104\12\17\21\0\1\17"+
    "\3\0\14\17\1\105\12\17\33\0\1\106\21\0\15\70"+
    "\1\107\50\70\1\71\2\70\1\110\1\70\1\71\34\70"+
    "\12\0\1\10\2\0\1\72\1\0\1\111\54\0\1\17"+
    "\3\0\1\17\1\53\25\17\21\0\1\17\3\0\4\17"+
    "\1\112\22\17\21\0\1\17\3\0\10\17\1\53\16\17"+
    "\21\0\1\17\3\0\4\17\1\113\22\17\7\0\1\114"+
    "\11\0\1\17\3\0\2\17\1\20\2\17\1\21\1\22"+
    "\1\23\1\24\1\25\2\17\1\26\2\17\1\27\1\17"+
    "\1\30\1\31\2\17\1\32\1\33\21\0\1\17\3\0"+
    "\16\17\1\53\10\17\21\0\1\17\3\0\24\17\1\115"+
    "\2\17\21\0\1\17\3\0\14\17\1\116\12\17\21\0"+
    "\1\17\3\0\23\17\1\117\3\17\21\0\1\17\3\0"+
    "\7\17\1\53\17\17\21\0\1\17\3\0\16\17\1\75"+
    "\10\17\43\0\1\120\11\0\15\70\1\107\1\70\1\3"+
    "\46\70\1\71\2\70\1\110\1\70\1\111\34\70\20\0"+
    "\1\17\3\0\15\17\1\53\11\17\21\0\1\17\3\0"+
    "\23\17\1\53\3\17\16\0\1\121\56\0\1\17\3\0"+
    "\21\17\1\122\5\17\21\0\1\17\3\0\17\17\1\123"+
    "\7\17\21\0\1\17\3\0\6\17\1\124\20\17\51\0"+
    "\1\125\31\0\1\126\2\0\1\127\1\130\1\131\1\132"+
    "\1\133\2\0\1\134\2\0\1\135\1\0\1\136\1\137"+
    "\2\0\1\140\1\141\21\0\1\17\3\0\17\17\1\53"+
    "\7\17\21\0\1\17\3\0\12\17\1\53\14\17\21\0"+
    "\1\17\3\0\13\17\1\53\13\17\34\0\1\142\47\0"+
    "\1\143\71\0\1\144\36\0\1\145\67\0\1\121\51\0"+
    "\1\145\53\0\1\146\1\0\1\147\44\0\1\121\5\0"+
    "\1\150\60\0\1\151\37\0\1\152\66\0\1\153\2\0"+
    "\1\154\45\0\1\155\46\0\1\156\50\0\1\157\44\0"+
    "\1\160\62\0\1\161\65\0\1\162\51\0\1\163\54\0"+
    "\1\121\55\0\1\164\46\0\1\165\60\0\1\166\51\0"+
    "\1\167\46\0\1\170\53\0\1\171\53\0\1\172\21\0"+
    "\1\173\72\0\1\121\56\0\1\174\57\0\1\121\47\0"+
    "\1\175\31\0\1\114\17\0\1\126\2\0\1\127\1\130"+
    "\1\131\1\132\1\133\2\0\1\134\2\0\1\135\1\0"+
    "\1\136\1\137\2\0\1\140\1\141\43\0\1\121\61\0"+
    "\1\176\43\0\1\177\62\0\1\200\37\0\1\121\62\0"+
    "\1\162\32\0\1\201\73\0\1\121\61\0\1\121\51\0"+
    "\1\202\51\0\1\203\42\0\1\204\53\0\1\205\13\0"+
    "\1\206\50\0\1\121\46\0\1\121\54\0\1\121\60\0"+
    "\1\207\56\0\1\210\47\0\1\211\43\0\1\211\60\0"+
    "\1\212\57\0\1\213\25\0\1\214\74\0\1\215\37\0"+
    "\1\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5896];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\32\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\16\1\4\0\15\1\2\0\4\1\1\0"+
    "\3\1\1\0\4\1\37\0\1\1\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public static void imprimeCaractere(String caractere) {
        switch (caractere) {
            case "=":
                System.out.println("[equal, =]");
                break;
            case "(":
                System.out.println("[l_paren, (]");
                break;
            case ")":
                System.out.println("[r_paren, )]");
                break;
            case "{":
                System.out.println("[l_bracket, {]");
                break;
            case "}":
                System.out.println("[r_bracket, }]");
                break;
            case ",":
                System.out.println("[comma, ,]");
                break;
            case ";":
                System.out.println("[semicolon, ;]");
                break;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Caractere inválido: <" + yytext() + ">");
            }
            // fall through
          case 11: break;
          case 2:
            { /* ignorar */
            }
            // fall through
          case 12: break;
          case 3:
            { System.out.printf("[arith_op, %s]", yytext());
            }
            // fall through
          case 13: break;
          case 4:
            { imprimeCaractere(yytext());
            }
            // fall through
          case 14: break;
          case 5:
            { System.out.printf("[num, %s]", yytext());
            }
            // fall through
          case 15: break;
          case 6:
            { System.out.printf("[relational_op, %s]", yytext());
            }
            // fall through
          case 16: break;
          case 7:
            { System.out.printf("[id, %s]", yytext());
            }
            // fall through
          case 17: break;
          case 8:
            { System.out.printf("[string_literal, %s]", yytext());
            }
            // fall through
          case 18: break;
          case 9:
            { System.out.printf("[logic_op, %s]", yytext());
            }
            // fall through
          case 19: break;
          case 10:
            { System.out.printf("[reserved_word, %s]", yytext());
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalisadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalisadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalisadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
